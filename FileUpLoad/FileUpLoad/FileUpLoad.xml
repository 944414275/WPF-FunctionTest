<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileUpLoad</name>
    </assembly>
    <members>
        <member name="T:FileUpLoad.AutofacUtility.CustomAutofacModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.AutofacUtility.CustomAutofacModule.Load(Autofac.ContainerBuilder)">
            <summary>
            重写Load方法
            </summary>
            <param name="containerBuilder"></param>
        </member>
        <member name="T:FileUpLoad.Controllers.AuthController">
            <summary>
            模拟登录授权、Token验证、Token状态验证
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.#ctor(Microsoft.Extensions.Options.IOptions{FileUpLoad.Utility.JwtSettings},FileUpLoad.Utility.ITokenHelper)">
            <summary>
            
            </summary>
            <param name="_jwtSettingsAccesser"></param>
            <param name="tokenHelper"></param>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            登录方法
            </summary>
            <param name="username">用户名</param>
            <param name="password">用户密码</param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.TestLogin">
            <summary>
            登录授权
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.TestGetUserInfo">
            <summary>
             获取登录用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.TestValiToken(System.String)">
            <summary>
            验证Token
            </summary>
            <param name="tokenStr">token</param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.AuthController.TestValiTokenState(System.String)">
            <summary>
            验证Token 带返回状态
            </summary>
            <param name="tokenStr"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Controllers.GetController">
            <summary>
            [Authorize]
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.GetController.Get(System.String)">
            <summary>
            没问题
            </summary> 
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.GetController.GetTwo">
            <summary>
            没问题
            </summary> 
            <param ></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Controllers.HomeController">
            <summary>
            Home
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.HomeController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.HomeController.Error">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Controllers.PostController">
            <summary>
            Post
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.Post(System.String)">
            <summary>
            这是get和post的区别，get默认是通过url后面的参数获取到参数的，
            而post默认是通过http方法体中获取参数的，所以这个方法会返回404
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostTwo(System.String)">
            <summary>
            这个和上面的区别是在属性标签上面没有{id},这样就不会让调用方认为是从url中获取
            参数，所以id是null
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostThree(System.String)">
            <summary>
            可以正常调用，但是不是正常的json格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostFour(FileUpLoad.Controllers.Student)">
            <summary>
             实体类 class 需要加[FromBody]标签，前端数据字段可以不区分大小写一样，但是字段要一样
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostFive(FileUpLoad.Controllers.Student)">
            <summary>
            实体类 class 可以不需要[FromBody]标签，前端数据字段可以不区分大小写一样，但是字段要一样
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostSix(System.Object)">
            <summary>
            dynamic动态类型 class,因为是dynamic，不是指定的strudent类型，所以前端字段就必须和后台的一样
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostSeven(System.Object)">
            <summary>
            dynamic动态类型 class,因为是dynamic，不是指定的strudent类型，所以前端字段就必须和后台的一样
            可以不需要[FromBody]标签
            使用实体作为参数的时候，前端直接传递普通json，后台直接使用对应的类型去接收即可，不用FromBody。但是这里需要注意的一点就是，这里不能指定contentType为appplication/json，
            否则，参数无法传递到后台。我们来看看它默认的contentType是什么：
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostEight(System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            JObject参数 string
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.PostController.PostTen(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Controllers.TestController">
            <summary>
            Test
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.TestController.Get1">
            <summary>
            Get1
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.TestController.Get(System.Int32,System.String)">
            <summary>
            没问题
            </summary>
            <param name="id">用户id</param>
            <param name="name">用户名字</param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.TestController.GetTwo(System.Int32,System.String)">
            <summary>
            没问题
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.TestController.GetThree(FileUpLoad.Controllers.Student)">
            <summary>
            不可以，和传参有关系
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.TestController.Post(Newtonsoft.Json.Linq.JObject)">
            <summary>
            没问题
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Controllers.Student">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Controllers.Student.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Controllers.Student.Age">
            <summary>
            
            </summary>
        </member>
        <member name="T:FileUpLoad.Controllers.UpLoadFilesController">
            <summary>
            文件上传
            </summary>
        </member>
        <member name="M:FileUpLoad.Controllers.UpLoadFilesController.#ctor(Microsoft.Extensions.Options.IOptions{FileUpLoad.Utility.UpFileOptions},Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            
            </summary>
            <param name="upFileOptions"></param>
            <param name="provider"></param>
        </member>
        <member name="M:FileUpLoad.Controllers.UpLoadFilesController.UpLoadFiles(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            普通文件上传
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.UpLoadFilesController.GetDownLoadFile(System.String)">
            <summary>
            根据文件名获取文件秘钥
            </summary>
            <param name="url">下载地址(相对路径)</param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Controllers.UpLoadFilesController.GetRawFile(System.String,System.String)">
            <summary>
            根据文件秘钥 以及订单编号 实现文件下载
            </summary>
            <param name="fileKey"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Filter.TokenFilter">
            <summary>
            Token验证过滤器
            </summary>
        </member>
        <member name="M:FileUpLoad.Filter.TokenFilter.#ctor(FileUpLoad.Utility.ITokenHelper)">
            <summary>
            通过依赖注入得到数据访问层实例
            </summary>
            <param name="tokenHelper"></param>
        </member>
        <member name="M:FileUpLoad.Filter.TokenFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FileUpLoad.Filter.TokenFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            请求接口时进行拦截处理
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:FileUpLoad.Model.LoginModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginModel.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginModel.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginModel.RememberMe">
            <summary>
            
            </summary>
        </member>
        <member name="T:FileUpLoad.Model.AccountModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Model.AccountModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.AccountModel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.AccountModel.Phone">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.AccountModel.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:FileUpLoad.Model.LoginRedisResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginRedisResult.AccessToken">
            <summary>
            用户登录token
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginRedisResult.TokenType">
            <summary>
            tokenType:Bearer
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.LoginRedisResult.LoginMod">
            <summary>
            用户登陆成功后存储的信息
            </summary>
        </member>
        <member name="T:FileUpLoad.Model.UserInfoModel">
            <summary>
            登录缓存对象
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.UserInfoModel.Id">
            <summary>
            会员编号
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.UserInfoModel.Name">
            <summary>
            登录名称
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.UserInfoModel.Phone">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.UserInfoModel.AutTime">
            <summary>
            授权时间
            </summary>
        </member>
        <member name="P:FileUpLoad.Model.UserInfoModel.ExpiresAt">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:FileUpLoad.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:FileUpLoad.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:FileUpLoad.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:FileUpLoad.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            1、UseServiceProviderFactory(new AutofacServiceProviderFactory());
            2、public void ConfigureContainer(ContainerBuilder containerBuilder)
            3、指定允许允许在控制器中获取服务实例 
            </summary>
            <param name="containerBuilder"></param>
        </member>
        <member name="M:FileUpLoad.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:FileUpLoad.Utility.ConfigurationManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ConfigurationManager.Init(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
             
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:FileUpLoad.Utility.ConfigurationManager.ConnectionStrings(System.String)">
            <summary>
            获取配置文件ConnectionStrings 属性值
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.ConfigurationManager.AppSettings(System.String)">
            <summary>
            获取配置文件AppSetting参数值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.ConfigurationManager.GetJwtSettings(System.String)">
            <summary>
             获取配置文件Jwt参数值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.ConfigurationManager.GetUpFileInfo(System.String)">
            <summary>
            获取配置文件 文件上传 参数值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Utility.DateTimeExtend">
            <summary>
            时间戳和日期的转化
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.DateTimeExtend.ConvertToTimeStamp(System.DateTime)">
            <summary>
            日期转换为时间戳（时间戳单位秒）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.DateTimeExtend.ConvertToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期（时间戳单位秒）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Utility.Enum">
            <summary>
            
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.Enum.ResultCodeEnum">
            <summary>
            系统数据返回状态
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.ResultCodeEnum.Error">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.ResultCodeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.ResultCodeEnum.ApiUnauthorized">
            <summary>
            接口未授权
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.Enum.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.TokenType.Ok">
            <summary>
            验证成功
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.TokenType.Fail">
            <summary>
            验证失败
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.TokenType.Expired">
            <summary>
            Token失效
            </summary>
        </member>
        <member name="F:FileUpLoad.Utility.Enum.TokenType.FormError">
            <summary>
            Token非法
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.ITokenHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ITokenHelper.ValiToken(System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean})">
            <summary>
            Token验证
            </summary>
            <param name="encodeJwt">token</param>
            <param name="secretKey">secretKey</param>
            <param name="validatePayLoad">自定义各类验证;是否包含那种申明，或者申明的值</param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.ITokenHelper.ValiTokenState(System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            带返回状态的Token验证
            </summary>
            <param name="encodeJwt">token</param>
            <param name="secretKey">secretKey</param>
            <param name="validatePayLoad">自定义各类验证； 是否包含那种申明，或者申明的值</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Utility.JwtSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.JwtSettings.Issuer">
            <summary>
            token是谁颁发的
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.JwtSettings.Audience">
            <summary>
            token可以给那些客户端使用
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.JwtSettings.SecretKey">
            <summary>
            加密的key（SecretKey必须大于16个,是大于，不是大于等于）
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.ResultModel">
            <summary>
            实体包装类
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel.#ctor(System.String,FileUpLoad.Utility.Enum.ResultCodeEnum)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="code"></param>
        </member>
        <member name="P:FileUpLoad.Utility.ResultModel.Code">
            <summary>
            返回代码 
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.ResultModel.Msg">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.ResultModel`1">
            <summary>
            实体包装类
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel`1.#ctor(System.String,FileUpLoad.Utility.Enum.ResultCodeEnum,`0)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="code"></param>
            <param name="content"></param>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel`1.Success(System.String,`0)">
            <summary>
            成功
            </summary>
            <param name="message"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.ResultModel`1.Error(System.String,`0)">
            <summary>
            错误
            </summary>
            <param name="message"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:FileUpLoad.Utility.ResultModel`1.Code">
            <summary>
            返回代码 
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.ResultModel`1.Msg">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.ResultModel`1.Data">
            <summary>
            实体内容
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.TokenHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.TokenHelper.ValiToken(System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean})">
            <summary>
            验证身份 验证签名的有效性
            </summary>
            <param name="encodeJwt"></param>
            <param name="secretKey">配置文件中取出来的签名秘钥</param>
            <param name="validatePayLoad">自定义各类验证； 是否包含那种申明，或者申明的值， </param>
        </member>
        <member name="M:FileUpLoad.Utility.TokenHelper.ToUnixEpochDate(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:FileUpLoad.Utility.TokenHelper.ValiTokenState(System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="encodeJwt"></param>
            <param name="secretKey"></param>
            <param name="validatePayLoad"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:FileUpLoad.Utility.UpFileOptions">
            <summary>
            文件上传类型
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.UpFileOptions.FileTypes">
            <summary>
            允许的文件类型
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.UpFileOptions.MaxSize">
            <summary>
            最大文件大小
            </summary>
        </member>
        <member name="P:FileUpLoad.Utility.UpFileOptions.UploadFilePath">
            <summary>
            上传文件路径
            </summary>
        </member>
        <member name="T:FileUpLoad.Utility.UpLoadHelper">
            <summary>
             文件上传 帮助类
            </summary>
        </member>
        <member name="M:FileUpLoad.Utility.UpLoadHelper.UploadWriteFileAsync(Microsoft.AspNetCore.Http.IFormFile,FileUpLoad.Utility.UpFileOptions,System.Int32)">
            <summary>
            上传文件，配置信息从自定义的json文件中拿取
            </summary>
            <param name="file"></param>
            <param name="upFileOptions">文件上传所需配置参数</param>
            <param name="userId">会员编号</param>
            <returns></returns>
        </member>
    </members>
</doc>
